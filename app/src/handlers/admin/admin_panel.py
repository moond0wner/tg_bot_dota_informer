import asyncio
import logging
from typing import List

from aiogram import Bot, F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters import Filter, Command

from .states import Broadcast
from ...utils.config import settings
from ...utils.keyboards import get_inline_buttons
from ...database.requests import get_users

router = Router()


class AdminProtect(Filter):
    def __init__(self):
        self.admins = settings.ADMINS

    async def __call__(self, message: Message):
        return message.from_user.id == self.admins # —Ç–∞–∫ –∫–∞–∫ –∞–¥–º–∏–Ω –≤—Å–µ–≥–æ –æ–¥–∏–Ω, —Ç–æ –∏ –ø—Ä–æ–≤–µ—Ä—è—é —á–µ—Ä–µ–∑ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ


@router.message(AdminProtect(), Command('help'))
async def _(message: Message):
    await message.answer("–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: "
                         "\n/help \- —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\."
                         "\n/sendall \- –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ\."
                         "\n/statistics \- —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö\.")


@router.message(AdminProtect(), Command('sendall'))
async def _(message: Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    await state.set_state(Broadcast.message)


@router.message(AdminProtect(), Broadcast.message)
async def _(message: Message, state: FSMContext):
    await state.update_data(message=message.text)
    await message.answer(f'–í–∞—à —Ç–µ–∫—Å—Ç: \n"{message.text}"\n\n–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É?',
                         reply_markup=await get_inline_buttons(btns={'confirm': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é ‚úÖ',
                                                                     'cancel': '–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå'}, ), parse_mode='')
    await state.set_state(Broadcast.confirm)


@router.callback_query(AdminProtect(), Broadcast.confirm, F.data == 'confirm')
async def _(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await callback.answer()
    await callback.message.edit_text("–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ, –Ω–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É\.\.\.üí≠")

    data = await state.get_data()
    text = data.get('message')
    users: List[int] = await get_users()

    total_users = len(users)
    successful_count = 0
    failed_count = 0
    for user_id in users:
        success = await send_message_to_user(bot, user_id, text)
        if success:
            successful_count += 1
        else:
            failed_count += 1

        await asyncio.sleep(0.05)

    await state.clear()

    await callback.message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\. \n–ò–∑ {total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: \n–£—Å–ø–µ—à–Ω–æ: {successful_count}\n–ü—Ä–æ–≤–∞–ª—å–Ω–æ: {failed_count}")


@router.callback_query(AdminProtect(), Broadcast.confirm, F.data == 'cancel')
async def cancel_broadcast(callback: CallbackQuery, state: FSMContext):
    await callback.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.message.edit_text("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()


@router.message(AdminProtect(), Command('statistics'))
async def get_statistics_bot(message: Message):
    table = await get_users()

    if not table:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    user_count = len(table)
    top_five_users = [
        f"–ò–º—è: {element['user']}, –∫–æ–ª\-–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {element['number_of_requests']}\n"
        for element in table[:5] 
    ]
    text = f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}\n–¢–æ–ø 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{''.join(top_five_users)}"

    await message.answer(text)

async def send_message_to_user(bot: Bot, tg_id: int, message: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        await bot.send_message(chat_id=tg_id, text=f'–í–∞–º –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: \n\n{message}', parse_mode='HTML')
        return True
    except Exception as e:
        logging.error(f'–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}: {e}')
        return False
